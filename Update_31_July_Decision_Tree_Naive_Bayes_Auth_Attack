Code for reference: Auth_attack_NaiveB_Decision_Tree.py
From a hypothetical log with this kind of attack, made a feature-set, where each entry is of the sample type:



({"ip_1":"0", "date_diff": "0", "response_type": "1", "byte_diff":"0",
"ip_1_1":"0", "date_diff_1": "0", "response_type_1": "1", "byte_diff_1":"0",
}, True)

Description:
Where ip_1 is '0' if client ip at line no. (x-1) is same as client ip at line no. x, '1' if it is different.
ip_1_1 is '0' if client ip at line no. (x+1) is same as client ip at line no. x, '1' if it is different.
date_diff is '0' if the date at line (x-1) is the same as x, '1' if different. date_diff_1 is for comparison of (x+1) and x
response_type is '1' if the response is of type '4xx' (fail series) for both (x-1) and (x), '0' otherwise.
response_type_1 is for similar comparison between (x+1) and (x).
byte_diff is the difference between the response data in bytes for x and (x-1) rounded off to say 100bytes. It is '0' if 
the difference is less than 100 and '1' if greater than 100. byte_diff_1 is for comparison between (x+1) and x.
'True' indicates and attack or anomalous behaviour and 'False' indicates normal behaviour.

Since labelling had to be done manually and data-pre-processing requires additional python coding, I created this data
encompassing all permutations/combinations for the 4 numeric features we have, for around 45-50 entries in total:
1. ip_1
2. date_diff
3. response_type
4. byte_diff

With this feature set in mind, labelling was done as True or False. 80% samples were set for training and 20% for test.
Two classifiers were tried:
1. Naive Bayes:
Results (Ran multiple times since test and train data gets alloted randomly):
1st Run: 
Printing accuracy with Naive Bayes:
0.875
Showing most informative features with Naive Bayes:
Most Informative Features
                  ip_1_1 = '0'              True : False  =      1.8 : 1.0
             date_diff_1 = '0'              True : False  =      1.6 : 1.0
               byte_diff = '0'              True : False  =      1.5 : 1.0
                    ip_1 = '0'              True : False  =      1.5 : 1.0
             byte_diff_1 = '0'              True : False  =      1.4 : 1.0
           response_type = '1'              True : False  =      1.4 : 1.0
         response_type_1 = '1'              True : False  =      1.2 : 1.0
               date_diff = '0'              True : False  =      1.1 : 1.0
None
2nd Run:
Printing accuracy with Naive Bayes:
1.0
Showing most informative features with Naive Bayes:
Most Informative Features
                  ip_1_1 = '0'              True : False  =      1.9 : 1.0
                    ip_1 = '0'              True : False  =      1.6 : 1.0
             date_diff_1 = '0'              True : False  =      1.5 : 1.0
         response_type_1 = '1'              True : False  =      1.3 : 1.0
               byte_diff = '0'              True : False  =      1.3 : 1.0
             byte_diff_1 = '0'              True : False  =      1.2 : 1.0
           response_type = '1'              True : False  =      1.2 : 1.0
               date_diff = '0'              True : False  =      1.1 : 1.0
None

3rd Run:
Printing accuracy with Naive Bayes:
0.75
Showing most informative features with Naive Bayes:
Most Informative Features
                  ip_1_1 = '0'              True : False  =      2.2 : 1.0
                    ip_1 = '0'              True : False  =      1.7 : 1.0
             date_diff_1 = '0'              True : False  =      1.6 : 1.0
           response_type = '1'              True : False  =      1.4 : 1.0
               byte_diff = '0'              True : False  =      1.4 : 1.0
             byte_diff_1 = '0'              True : False  =      1.3 : 1.0
         response_type_1 = '1'              True : False  =      1.2 : 1.0
               date_diff = '0'              True : False  =      1.1 : 1.0
None


2. Decision Tree Classifier:
Results:
1st Run:
Printing accuracy with Decision Tree:
0.875
Printing pseudo code (rules inferred) for depth 4:
if ip_1_1 == '0': 
  if byte_diff == '0': 
    if byte_diff_1 == '0': 
      if date_diff_1 == '0': return True
      if date_diff_1 == '1': return False
    if byte_diff_1 == '1': return False
  if byte_diff == '1': return False
if ip_1_1 == '1': return False



2nd Run:
Printing accuracy with Decision Tree:
1.0
Printing pseudo code for depth 4:
if ip_1_1 == '0': 
  if byte_diff_1 == '0': 
    if date_diff_1 == '0': 
      if ip_1 == '0': return True
      if ip_1 == '1': return False
    if date_diff_1 == '1': return False
  if byte_diff_1 == '1': return False
if ip_1_1 == '1': return False



3rd Run:
Printing accuracy with Decision Tree:
0.625
Printing pseudo code for depth 4:
if ip_1_1 == '0': 
  if response_type == '0': return False
  if response_type == '1': 
    if date_diff == '0': 
      if byte_diff == '0': return True
      if byte_diff == '1': return False
    if date_diff == '1': return False
if ip_1_1 == '1': return False


4th Run:
Printing accuracy with Decision Tree
0.875
Printing pseudo code for depth 4:
if ip_1_1 == '0': 
  if response_type == '0': return False
  if response_type == '1': 
    if date_diff_1 == '0': 
      if byte_diff_1 == '0': return True
      if byte_diff_1 == '1': return False
    if date_diff_1 == '1': return False
if ip_1_1 == '1': return False



The decision tree classifier, as expected, infers rules where an attack holds 'True' if ip_1_1 and ip_1 are 0 (all 3
client ips are same), it was recorded on the same day, the response type is of type 4XX, response byte diff is less than
100 bytes or so.
